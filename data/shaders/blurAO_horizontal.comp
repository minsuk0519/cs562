#version 460

#include "include/constant.glsl"

layout (local_size_x = 1, local_size_y = 100, local_size_z = 1) in;
layout (binding = 0, r32f) uniform readonly image2D blurTarget;
layout (binding = 1, r32f) uniform writeonly image2D blurOutput;

layout(binding = 2) uniform sampler2D posTex;
layout(binding = 3) uniform sampler2D normTex;

layout(binding = 4) uniform camera
{
	vec3 position;
	
	int width;
	int height;
} cam;

layout(binding = 5) uniform Weight
{
	int w;
	float weight[101];
};

const int ysize = 100;

shared vec4 v[ysize + 101];
shared float d[ysize + 101];
shared vec3 n[ysize + 101];

void main()
{
	vec4 rgba = vec4(0,0,0,0);

	ivec2 gpos = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	uint threadid = gl_LocalInvocationID.y;
	
	ivec2 fragcoord = gpos + ivec2(0, -w);
	fragcoord.x = clamp(fragcoord.x, 0, cam.width);
	fragcoord.y = clamp(fragcoord.y, 0, cam.height);
	
	v[threadid] = imageLoad(blurTarget, fragcoord);
	vec3 P = texelFetch(posTex, fragcoord, 0).xyz;
	vec3 diff = P - cam.position;
	d[threadid] = length(diff);
	n[threadid] = texelFetch(normTex, fragcoord, 0).xyz;
	
	if(threadid <= 2 * w)
	{
		fragcoord = gpos + ivec2(0, ysize-w);
		fragcoord.x = clamp(fragcoord.x, 0, cam.width);
		fragcoord.y = clamp(fragcoord.y, 0, cam.height);
	
		v[threadid + ysize] = imageLoad(blurTarget, fragcoord);
		
		P = texelFetch(posTex, fragcoord, 0).xyz;
		diff = P - cam.position;
		d[threadid + ysize] = length(diff);
		n[threadid + ysize] = texelFetch(normTex, fragcoord, 0).xyz;
	}
	
    barrier();
		
	float distance = d[w + threadid];
	vec3 N = n[w + threadid];
	
	float s = 0.01;
	
	float Wsum = 0.0;
	
	for(int i = 0; i <= 2*w; ++i)
	{
		float di = d[i + threadid];
		vec3 Ni = n[i + threadid];
		
		float R = max(0.0, dot(N, Ni)) * exp(-pow(di - distance, 2) / (2 * s)) / sqrt(2 * PI * s);
		
		float W = weight[i] * R;
		
		Wsum += W;
		rgba += v[i + threadid] * W;
	}
	
	if(Wsum >= 0.0000001) rgba /= Wsum;
			
	imageStore(blurOutput, gpos, rgba);
}