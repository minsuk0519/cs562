#version 460

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout (binding = 0, r32f) uniform readonly image2D blurTarget;
layout (binding = 1, r32f) uniform writeonly image2D blurOutput;

layout(binding = 2) uniform sampler2D posTex;
layout(binding = 3) uniform sampler2D normTex;

layout(binding = 4) uniform camera
{
	vec3 position;
	
	int width;
	int height;
} cam;

layout(binding = 5) uniform Weight
{
	int w;
	float weight[101];
};

const float e = 2.718281828459045;

void main()
{
	//vec4 rgba = vec4(0,0,0,0);
	//int start = -w;
	//int end = w;
	//int length = 2 * w + 1;
	//
	//float weight[2 * w + 1];
	//float sumWeight = 0;
	//
	//for(int i = start; i <= end; ++i)
	//{
	//	weight[i + w] = pow(e, -(2 * i * i) / (w * w));
	//	sumWeight += weight[i + w];
	//}
	//for(int i = start; i <= end; ++i)
	//{
	//	weight[i + w] /= sumWeight;
	//}
	//
	//ivec2 gpos = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	//uint threadid = gl_LocalInvocationID.y;
	//
	//v[threadid] = imageLoad(blurTarget, gpos + ivec2(0, -w));
	//if(threadid <= 2 * w) v[threadid + 128] = imageLoad(blurTarget, gpos + ivec2(0, 128-w));
	//
    //barrier();
	//
	//for(int i = 0; i <= 2*w; ++i)
	//{
	//	rgba += v[threadid + i] * weight[i];
	//}
	//		
	//imageStore(blurOutput, gpos, rgba);
	
	
	
	ivec2 gpos = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	uint threadid = gl_LocalInvocationID.y;
	
	vec4 rgba = imageLoad(blurTarget, gpos);
	
	imageStore(blurOutput, gpos, rgba);
}